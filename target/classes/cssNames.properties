# 0, 90, 180 or 270
Rotation.rotation=
# float
Indent.indentleft=margin-left
# float
Indent.indentright=margin-right
# float
Indent.indent=
# the leading (height) of text
Leading.leading=
# float
Table.spaceafter=
# integer
Table.headerrows=
# integer
Table.relativewidth=
# integer
Table.columns=
# float / float[] (1.2|1.3|...)
Table.widths=
# integer
Table.footerrows=
# float
Table.spacebefore=
# how much do we shift y from a known position
Page.shifty=
# how much do we shift x from a known position
Page.shiftx=
# when true be part of regular styling
Page.dostyle=
# float 
Page.margin_bottom=
# float 
Page.width=
# data for the class, subclass determines type of data: DATATYPE
Page.data=
# transformation matrix (6 values: [SCALEX: 0, SHEARX: 1, SHEARY: 2, SCALEY: 3, TRANSLATEX: 4, TRANSLATEY: 5])
Page.transform=
# float
Page.margin_top=
# float 
Page.height=
# #rgb (background of page)
Page.color=
# float 
Page.margin_left=
# how to blend layers: [OVERLAY, BURN, DODGE, DARKEN, LIGHTEN, COMPATIBLE, MULTIPLY, DIFF, EXCLUDE, HARDLIGHT, SOFTLIGHT, SCREEN, NORMAL]
Page.blend=
# draw on background
Page.background=
# float 
Page.margin_right=
# 0 for fully transparent, 1 for fully opace
Page.opacity=
# name of the layer to use
Page.layername=
Image.password=
# scales your image (percentage)
Image.scale=
# how much do we shift y from a known position
Image.shifty=
# color of the dropshadow, default black
Image.shadowcolor=
# how much do we shift x from a known position
Image.shiftx=
# when true be part of regular styling
Image.dostyle=
# rotates your image
Image.rotate=
# y offset of the shadow, default -2mm
Image.shadowy=
# x offset of the shadow, default 2mm
Image.shadowx=
# is image a pdf
Image.pdf=
# data for the class, subclass determines type of data: DATATYPE
Image.data=
# url
Image.url=
# transformation matrix (6 values: [SCALEX: 0, SHEARX: 1, SHEARY: 2, SCALEY: 3, TRANSLATEX: 4, TRANSLATEY: 5])
Image.transform=
# do we draw a dropshadow
Image.shadow=
# how to blend layers: [OVERLAY, BURN, DODGE, DARKEN, LIGHTEN, COMPATIBLE, MULTIPLY, DIFF, EXCLUDE, HARDLIGHT, SOFTLIGHT, SCREEN, NORMAL]
Image.blend=
# draw on background
Image.background=
# 0 for fully transparent, 1 for fully opace
Image.opacity=
# name of the layer to use
Image.layername=
# opacity for the shadow, defaullt 0.3
Image.shadowopacity=
# absolute y position to draw
Image.y=
# absolute x position to draw
Image.x=
# how many rows to span
ColRowSpan.rowspan=
# how many columns to span
ColRowSpan.colspan=
# [TOP, RIGHT, BOTTOM, LEFT, TRBL, LR, LRB, LRT, LB, LBT, LT, RB, RBT, RT, BT, NONE]
Border.position=border
# borderwidth
Border.borderwidth=border
# #rgb
Border.color=border; border-color
# scales your image (percentage)
Barcode.scale=
# when true be part of regular styling
Barcode.dostyle=
# color of the dropshadow, default black
Barcode.shadowcolor=
# rotates your image
Barcode.rotate=
# is image a pdf
Barcode.pdf=
# data for the class, subclass determines type of data: DATATYPE
Barcode.data=
# minimal width of bars
Barcode.minbarwidth=
# transformation matrix (6 values: [SCALEX: 0, SHEARX: 1, SHEARY: 2, SCALEY: 3, TRANSLATEX: 4, TRANSLATEY: 5])
Barcode.transform=
# do we draw a dropshadow
Barcode.shadow=
# alias of text font
Barcode.family=
# how to blend layers: [OVERLAY, BURN, DODGE, DARKEN, LIGHTEN, COMPATIBLE, MULTIPLY, DIFF, EXCLUDE, HARDLIGHT, SOFTLIGHT, SCREEN, NORMAL]
Barcode.blend=
# 0 for fully transparent, 1 for fully opace
Barcode.opacity=
# opacity for the shadow, defaullt 0.3
Barcode.shadowopacity=
# type of the barcode: [EAN8, EAN13, UPCA, UPCE, CODE128, CODE128UCC, CODE128RAW, PLANET, POSTNET]
Barcode.codetype=
# height of bars
Barcode.barheight=
# how much do we shift y from a known position
Barcode.shifty=
# how much do we shift x from a known position
Barcode.shiftx=
# y offset of the shadow, default -2mm
Barcode.shadowy=
# x offset of the shadow, default 2mm
Barcode.shadowx=
# color of bars
Barcode.barcolor=
# url
Barcode.url=
# color of text
Barcode.txtcolor=
# draw on background
Barcode.background=
# name of the layer to use
Barcode.layername=
# absolute y position to draw
Barcode.y=
# size of text
Barcode.fontsize=
# absolute x position to draw
Barcode.x=
# when true be part of regular styling
Shape.dostyle=
# color of the dropshadow, default black
Shape.shadowcolor=
# data for the class, subclass determines type of data: DATATYPE
Shape.data=
# [rectangle, roundrectangle, ellipse, free, bezier]
Shape.SHAPE=
# padding for enclosing shape
Shape.padding=
# connect first and last point
Shape.close=
# color
Shape.bordercolor=
# transformation matrix (6 values: [SCALEX: 0, SHEARX: 1, SHEARY: 2, SCALEY: 3, TRANSLATEX: 4, TRANSLATEY: 5])
Shape.transform=
# float
Shape.height=
# do we draw a dropshadow
Shape.shadow=
# how to blend layers: [OVERLAY, BURN, DODGE, DARKEN, LIGHTEN, COMPATIBLE, MULTIPLY, DIFF, EXCLUDE, HARDLIGHT, SOFTLIGHT, SCREEN, NORMAL]
Shape.blend=
# 0 for fully transparent, 1 for fully opace
Shape.opacity=
# line and free shapes
Shape.points=
# rounded line connections
Shape.rounded=
# opacity for the shadow, defaullt 0.3
Shape.shadowopacity=
# how much do we shift y from a known position
Shape.shifty=
# how much do we shift x from a known position
Shape.shiftx=
# y offset of the shadow, default -2mm
Shape.shadowy=
# x offset of the shadow, default 2mm
Shape.shadowx=
# float
Shape.width=
# fill shapes or not
Shape.fill=
# float
Shape.borderwidth=
# color
Shape.color=
# draw on background
Shape.background=
# enclosing shape rectangle, ellipse
Shape.enclosing=
# name of the layer to use
Shape.layername=
# for rounded corners
Shape.radius=
# absolute y position to draw
Shape.y=
# absolute x position to draw
Shape.x=
# integer
Zebra.alternate=
# #rgb
Zebra.evencolor=
# #rgb
Zebra.oddcolor=
# how much do we shift y from a known position
Text.shifty=
# color of the dropshadow, default black
Text.shadowcolor=
# how much do we shift x from a known position
Text.shiftx=
# when true be part of regular styling
Text.dostyle=
# float
Text.rotate=
# y offset of the shadow, default -2mm
Text.shadowy=
# x offset of the shadow, default 2mm
Text.shadowx=
# data for the class, subclass determines type of data: DATATYPE
Text.data=
# fontsize
Text.size=
# transformation matrix (6 values: [SCALEX: 0, SHEARX: 1, SHEARY: 2, SCALEY: 3, TRANSLATEX: 4, TRANSLATEY: 5])
Text.transform=
# #rgb
Text.color=
# string
Text.family=
# do we draw a dropshadow
Text.shadow=
# how to blend layers: [OVERLAY, BURN, DODGE, DARKEN, LIGHTEN, COMPATIBLE, MULTIPLY, DIFF, EXCLUDE, HARDLIGHT, SOFTLIGHT, SCREEN, NORMAL]
Text.blend=
# draw on background
Text.background=
# 0 for fully transparent, 1 for fully opace
Text.opacity=
# name of the layer to use
Text.layername=
# opacity for the shadow, defaullt 0.3
Text.shadowopacity=
# absolute y position to draw
Text.y=
# absolute x position to draw
Text.x=
# #rgb
Background.color=background-color
# style for a retrieved font[normal, bold, italic, underline, strike]
Font.style=font-style
# #rgb
Font.color=color
# alias for based on which a font is retrieved (preferred over style)
Font.family=font-family
# fontsize
Font.size=font-size
# number of columns
Columns.columns=
# left of first column
Columns.left=
# space between columns
Columns.spacing=
# right of last column
Columns.right=
# transformation matrix (6 values: [SCALEX: 0, SHEARX: 1, SHEARY: 2, SCALEY: 3, TRANSLATEX: 4, TRANSLATEY: 5])
Shadow.transform=
# how much do we shift y from a known position
Shadow.shifty=
# when true be part of regular styling
Shadow.dostyle=
# how much do we shift x from a known position
Shadow.shiftx=
# #rgb: shadow color (default is font color)
Shadow.color=
# draw on background
Shadow.background=
# how to blend layers: [OVERLAY, BURN, DODGE, DARKEN, LIGHTEN, COMPATIBLE, MULTIPLY, DIFF, EXCLUDE, HARDLIGHT, SOFTLIGHT, SCREEN, NORMAL]
Shadow.blend=
# data for the class, subclass determines type of data: DATATYPE
Shadow.data=
# 0 for fully transparent, 1 for fully opace
Shadow.opacity=
# name of the layer to use
Shadow.layername=
# the password for the signing certificate
DocumentSettings.keystorepassword=
# float 
DocumentSettings.margin_bottom=margin;
# a subject for the document
DocumentSettings.subject=
# creator
DocumentSettings.creator=
# float
DocumentSettings.margin_top=margin;
# author
DocumentSettings.author=
# a title for the document
DocumentSettings.title=
# float 
DocumentSettings.height=
# [ENC40, ENC128, ENC128AES]
DocumentSettings.encryption=
# permissions for the pdf, use in conjunction with password / encryption: [PRINT, ASSEMBLY, COPY, DEGRADEDPRINT, FILLIN, ANNOTATE, CHANGE, SCREEN, ALL]
DocumentSettings.permissions=
# wordt dit een pdf die voldoet aan de PDF/X-1a standaard
DocumentSettings.pdfa=
# the certificate (.p12, .pfx, .jks) to use for document signing
DocumentSettings.signcertificate=
# llx, lly, urx, ury for this pdf box
DocumentSettings.trim=
# comma separated keywords for the document
DocumentSettings.keywords=
# llx, lly, urx, ury for this pdf box
DocumentSettings.art=
# float 
DocumentSettings.width=
# a password for the owner of document
DocumentSettings.ownerpassword=
# the type of the signing certificate: [jks, pkcs12]
DocumentSettings.keystoretype=
# float 
DocumentSettings.margin_right=margin;
# float 
DocumentSettings.margin_left=margin;
# llx, lly, urx, ury for this pdf box
DocumentSettings.bleed=
# url for the colorprofile to use, for pdf/a1a compliance
DocumentSettings.colorprofile=
# [LEFT_TOP, LEFT_MIDDLE, LEFT_BOTTOM, RIGHT_TOP, RIGHT_MIDDLE, RIGHT_BOTTOM, CENTER_TOP, CENTER_MIDDLE, CENTER_BOTTOM]
ImageAlign.align=
# width of cell
ImageAlign.width=
# leading for text, set fixed height for cells
Height.height=height
# image to use as symbol for a list with symbols
ListItem.symbolimage=
# text to use as symbol for a list with symbols
ListItem.symbol=
# style for a retrieved font[normal, bold, italic, underline, strike]
ListItem.style=
# #rgb
ListItem.color=
# alias for based on which a font is retrieved (preferred over style)
ListItem.family=
# fontsize
ListItem.size=
# [TOP, RIGHT, BOTTOM, LEFT, TRBL, LR, LRB, LRT, LB, LBT, LT, RB, RBT, RT, BT, NONE]
Padding.position=padding;padding-top;padding-right;padding-bottom;padding-left
# padding
Padding.padding=padding;padding-top;padding-right;padding-bottom;padding-left
# [LEFT_TOP, LEFT_MIDDLE, LEFT_BOTTOM, RIGHT_TOP, RIGHT_MIDDLE, RIGHT_BOTTOM, CENTER_TOP, CENTER_MIDDLE, CENTER_BOTTOM]
Alignment.align=text-align; vertical-align
# float
Underline.linewidth=
# transformation matrix (6 values: [SCALEX: 0, SHEARX: 1, SHEARY: 2, SCALEY: 3, TRANSLATEX: 4, TRANSLATEY: 5])
Underline.transform=
# how much do we shift y from a known position
Underline.shifty=
# when true be part of regular styling
Underline.dostyle=
# how much do we shift x from a known position
Underline.shiftx=
# #rgb: underline color (default is font color)
Underline.color=
# draw on background
Underline.background=
# how to blend layers: [OVERLAY, BURN, DODGE, DARKEN, LIGHTEN, COMPATIBLE, MULTIPLY, DIFF, EXCLUDE, HARDLIGHT, SOFTLIGHT, SCREEN, NORMAL]
Underline.blend=
# data for the class, subclass determines type of data: DATATYPE
Underline.data=
# 0 for fully transparent, 1 for fully opace
Underline.opacity=
# name of the layer to use
Underline.layername=
# float
Spacing.spaceafter=margin-bottom
# float
Spacing.spacebefore=margin-top
# transformation matrix (6 values: [SCALEX: 0, SHEARX: 1, SHEARY: 2, SCALEY: 3, TRANSLATEX: 4, TRANSLATEY: 5])
AdvancedImpl.transform=
# how much do we shift y from a known position
AdvancedImpl.shifty=
# when true be part of regular styling
AdvancedImpl.dostyle=
# how much do we shift x from a known position
AdvancedImpl.shiftx=
# draw on background
AdvancedImpl.background=
# how to blend layers: [OVERLAY, BURN, DODGE, DARKEN, LIGHTEN, COMPATIBLE, MULTIPLY, DIFF, EXCLUDE, HARDLIGHT, SOFTLIGHT, SCREEN, NORMAL]
AdvancedImpl.blend=
# data for the class, subclass determines type of data: DATATYPE
AdvancedImpl.data=
# 0 for fully transparent, 1 for fully opace
AdvancedImpl.opacity=
# name of the layer to use
AdvancedImpl.layername=
# String to use as postfix for list items
List.postfix=
# style for a retrieved font[normal, bold, italic, underline, strike]
List.style=font-style
# text to use as symbol for a list with symbols
List.symbol=
# image to use as symbol for a list with symbols
List.symbolimage=list-style-image
# #rgb
List.color=color
# alias for based on which a font is retrieved (preferred over style)
List.family=font-family
# String to use as prefix for list items
List.prefix=
# type of list: [SYMBOL, ALPHA, NUMERIC]
List.listtype=list-style-type
# fontsize
List.size=font-size
