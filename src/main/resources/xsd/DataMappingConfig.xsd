<?xml version="1.0"?>
<xs:schema version="1.0" targetNamespace="http://www.vectorprint.nl/report/datamapping/1.3"
           xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vpmap="http://www.vectorprint.nl/report/datamapping/1.3"
           elementFormDefault="qualified" attributeFormDefault="unqualified">
   <xs:annotation>
      <xs:documentation>Schema for configuring how Java classes are to be translated into report parts.</xs:documentation>
   </xs:annotation>
   
   <xs:complexType name="datamappingstype" id="datamappingstype">
      <xs:annotation>
         <xs:documentation>The configuration consists out of one or more data mapping elements, each
            describing the mapping to report parts for specific Java classes. At processing time this configuration is used to translate objects
            into report parts, get hold of the data in the objects and of the styling for the report part.</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="datamapping" type="vpmap:datamappingtype" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="useannotations" default="false" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>
               When true xml configuration is supplemented by annotations on data classes. When container start, element start, element from data
               or container end information is not found in xml configuration it is searched in annotations.
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>

   <xs:complexType name="datamappingtype" id="datamappingtype" >
      <xs:annotation>
         <xs:documentation>Each datamappingtype applies to Java classes determined by two attributes, a classname and wether or not the classname is a regular expression.
            Furthermore each datamappingtype holds information on how it is translated into a report part, its datatype and its style classes.
         </xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="startcontainer" type="vpmap:startcontainertype" minOccurs="0" maxOccurs="unbounded"/>
         <xs:element name="element" type="vpmap:elementtype" minOccurs="0" maxOccurs="unbounded"/>
         <xs:element name="elementsfromdata" type="vpmap:elementsfromdatatype" minOccurs="0"/>
         <xs:element name="endcontainer" type="vpmap:endcontainertype" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="classname" type="xs:string" use="required">
         <xs:annotation>
            <xs:documentation>the name (or regular expression) of the class to use this mapping for</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="regex" type="xs:boolean" default="false">
         <xs:annotation>
            <xs:documentation>is the classname a regular expression</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" type="xs:string">
         <xs:annotation>
            <xs:documentation>for multiple mappings of the same class, ability to use exactly this mapping.
               When an id is present the mapping will only be used for data added specifying this id, when
               an id is not present the mapping will only be used for data added not specifying an id.
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>

   <xs:complexType name="dataholdingtype" id="dataholdingtype" >
      <xs:annotation>
         <xs:documentation>base type for Java classes holding data, contains information on how to get the data from the Java class, the type of data and style information.</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="datatype" type="vpmap:datatypetype" minOccurs="0" />
         <xs:choice>
            <xs:element name="styleclass" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="styleclassesmethod" type="xs:string" minOccurs="0" >
                  <xs:annotation>
                     <xs:documentation>method to be called to yield styleclasses</xs:documentation>
                  </xs:annotation>
               </xs:element>
         </xs:choice>
      </xs:sequence>
      <xs:attribute name="valueasstringmethod" default="toString">
         <xs:annotation>
            <xs:documentation>which method should be called to get the data from the data object</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   
   <xs:complexType name="startcontainertype" id="startcontainertype" >
      <xs:annotation>
         <xs:documentation>information about a container to be started and wether or not to add data to it</xs:documentation>
      </xs:annotation>
      <xs:complexContent>
         <xs:extension base="vpmap:dataholdingtype">
            <xs:choice>
               <xs:element name="containertype" type="vpmap:containertypetype" />
               <xs:element name="containertypemethod" type="xs:string" >
                  <xs:annotation>
                     <xs:documentation>method to be called to yield the type of container, method must return a container name</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:choice>
            <xs:attribute name="sectionlevel" default="1" type="xs:integer">
               <xs:annotation>
                  <xs:documentation>used when the container is a section, denotes the depth of the section</xs:documentation>
               </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" type="xs:boolean" name="adddata">
               <xs:annotation>
                  <xs:documentation>when true data will be added to this container (useful for example with phrase)</xs:documentation>
               </xs:annotation>
            </xs:attribute>
         </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   
   <xs:simpleType name="containertypetype" id="containertypetype">
      <xs:annotation>
         <xs:documentation>possible containers</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="COLUMS"/>
         <xs:enumeration value="CELL"/>
         <xs:enumeration value="TABLE"/>
         <xs:enumeration value="NESTED_TABLE"/>
         <xs:enumeration value="LIST"/>
         <xs:enumeration value="LISTITEM"/>
         <xs:enumeration value="PHRASE"/>
         <xs:enumeration value="PARAGRAPH"/>
         <xs:enumeration value="ANCHOR"/>
         <xs:enumeration value="SECTION"/>
      </xs:restriction>
   </xs:simpleType>
   
   <xs:complexType name="elementtype" id="elementtype" >
      <xs:annotation>
         <xs:documentation>information about an iText element to be added for a Java object</xs:documentation>
      </xs:annotation>
      <xs:complexContent>
         <xs:extension base="vpmap:dataholdingtype">
            <xs:choice>
               <xs:element name="elementtype" type="vpmap:elementtypetype" />
               <xs:element name="elementtypemethod" type="xs:string" >
                  <xs:annotation>
                     <xs:documentation>method to be called to yield the type of element, method must return a full classname of an iText Element</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:choice>
         </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   
   <xs:simpleType name="elementtypetype" id="elementtypetype">
      <xs:annotation>
         <xs:documentation>a string which must be the Java classname of an iText Element</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="Anchor"/>
         <xs:enumeration value="Chunk"/>
         <xs:enumeration value="Phrase"/>
         <xs:enumeration value="Paragraph"/>
         <xs:enumeration value="Image"/>
         <xs:enumeration value="ListItem"/>
         <xs:enumeration value="pdf.PdfPCell"/>
      </xs:restriction>
   </xs:simpleType>
   
   <xs:complexType name="elementsfromdatatype" id="elementsfromdatatype"  >
      <xs:annotation>
         <xs:documentation>information on how to turn a Java class into multiple elements of the same type</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="element" type="vpmap:elementtype"/>
         <xs:element name="datalistmethod" type="xs:string">
            <xs:annotation>
               <xs:documentation>name of the method to be called to yield a java.util.List of data objects</xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:sequence>
   </xs:complexType>
   
   <xs:complexType name="endcontainertype" id="endcontainertype" >
      <xs:annotation>
         <xs:documentation>configure the end of a container</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="containertype" type="vpmap:containertypetype" />
      </xs:sequence>
      <xs:attribute name="depthtoend" default="1" type="xs:integer">
         <xs:annotation>
            <xs:documentation>upto which depth should nested containers be ended? By default only the current container on the stack will
               be ended.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   
   <xs:complexType name="datatypetype" id="datatypetype">
      <xs:annotation>
         <xs:documentation>configuration for types of data (numeric, text, date,...)</xs:documentation>
      </xs:annotation>
      <xs:attribute name="format">
      <xs:annotation>
         <xs:documentation>optionaly provide your own format pattern (SimpleDateformat, NumberFormat)</xs:documentation>
      </xs:annotation>
      </xs:attribute>
      <xs:attribute default="com.vectorprint.report.data.types.TextValue" name="dataclass"/>
   </xs:complexType>
   
   <xs:element name="datamappings" id="datamappings" type="vpmap:datamappingstype">
      <xs:annotation>
         <xs:documentation>the root of the configuration</xs:documentation>
      </xs:annotation>
   </xs:element>

</xs:schema>
